# Docker Compose configuration for local StackAI BYOC testing
# This provides an alternative to Kubernetes for local testing

version: "3.8"

services:
  # MongoDB - Public image
  mongodb:
    image: bitnami/mongodb:7.0.8
    container_name: stackai-mongodb
    environment:
      MONGODB_ROOT_PASSWORD: mongodb123
      MONGODB_USERNAME: stackai
      MONGODB_PASSWORD: stackai123
      MONGODB_DATABASE: stackai
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/bitnami/mongodb
    networks:
      - stackai-network

  # Redis - Public image
  redis:
    image: bitnami/redis:7.2.3
    container_name: stackai-redis
    environment:
      REDIS_PASSWORD: redis123
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/bitnami/redis
    networks:
      - stackai-network

  # Supabase Database - Public image
  supabase-db:
    image: supabase/postgres:15.1.0.147
    container_name: stackai-supabase-db
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - supabase_db_data:/var/lib/postgresql/data
    networks:
      - stackai-network

  # Weaviate - Public image
  weaviate:
    image: semitechnologies/weaviate:1.22.4
    container_name: stackai-weaviate
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: "true"
      PERSISTENCE_DATA_PATH: "/var/lib/weaviate"
      DEFAULT_VECTORIZER_MODULE: "none"
      ENABLE_MODULES: ""
      CLUSTER_HOSTNAME: "node1"
    ports:
      - "8080:8080"
    volumes:
      - weaviate_data:/var/lib/weaviate
    networks:
      - stackai-network

  # StackEnd Backend - Azure image (requires ACR access)
  stackend:
    image: stackai.azurecr.io/stackai/stackend-backend:latest
    container_name: stackai-stackend
    environment:
      # Add your environment variables here
      - STACKAI_LICENCE=your-licence-key-here
    ports:
      - "8000:8000"
      - "8888:8888"
    depends_on:
      - mongodb
      - redis
      - supabase-db
      - weaviate
    networks:
      - stackai-network
    # Uncomment if you need to pull from ACR
    # image_pull_policy: always

  # StackWeb Frontend - Azure image (requires ACR access)
  stackweb:
    image: stackai.azurecr.io/stackai/stackweb:latest
    container_name: stackai-stackweb
    environment: []
    ports:
      - "3000:3000"
    depends_on:
      - stackend
    networks:
      - stackai-network
    # Uncomment if you need to pull from ACR
    # image_pull_policy: always

  # Celery Worker - Azure image (requires ACR access)
  celery:
    image: stackai.azurecr.io/stackai/stackend-backend:latest
    container_name: stackai-celery
    command: ["celery", "-A", "apps", "worker", "--loglevel=info"]
    environment: []
      # Add your environment variables here
    depends_on:
      - mongodb
      - redis
      - supabase-db
      - weaviate
    networks:
      - stackai-network
    # Uncomment if you need to pull from ACR
    # image_pull_policy: always

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: stackai-nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - stackweb
      - stackend
    networks:
      - stackai-network

volumes:
  mongodb_data:
  redis_data:
  supabase_db_data:
  weaviate_data:

networks:
  stackai-network:
    driver: bridge
