{{- if .Values.mongodb.enabled }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "mongodb.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "mongodb.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.mongodb.replicaCount }}
  selector:
    matchLabels:
      {{- include "mongodb.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "mongodb.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.serviceAccount.create }}
      serviceAccountName: {{ include "mongodb.serviceAccountName" $ }}
      {{- end }}
      {{- with .Values.mongodb.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.mongodb.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.mongodb.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.mongodb.securityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: mongodb
          image: "{{ .Values.mongodb.image.repository }}:{{ .Values.mongodb.image.tag }}"
          imagePullPolicy: {{ .Values.mongodb.image.pullPolicy }}
          {{- with .Values.mongodb.podSecurityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          env:
            - name: MONGO_INITDB_ROOT_USERNAME
              value: {{ .Values.mongodb.auth.rootUsername | quote }}
            - name: MONGO_INITDB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "mongodb.auth.secretRef" . }}
                  key: mongodb-root-password
            - name: MONGO_INITDB_DATABASE
              value: {{ .Values.mongodb.auth.rootDatabase | quote }}
          ports:
            - name: mongodb
              containerPort: {{ .Values.mongodb.service.ports.mongodb }}
              protocol: TCP
          {{- with .Values.mongodb.livenessProbe }}
          {{- if .enabled }}
          livenessProbe:
            exec:
              command:
                - mongosh
                - --eval
                - "db.adminCommand('ping')"
            initialDelaySeconds: {{ .initialDelaySeconds }}
            periodSeconds: {{ .periodSeconds }}
            timeoutSeconds: {{ .timeoutSeconds }}
            failureThreshold: {{ .failureThreshold }}
            successThreshold: {{ .successThreshold }}
          {{- end }}
          {{- end }}
          {{- with .Values.mongodb.readinessProbe }}
          {{- if .enabled }}
          readinessProbe:
            exec:
              command:
                - mongosh
                - --eval
                - "db.adminCommand('ping')"
            initialDelaySeconds: {{ .initialDelaySeconds }}
            periodSeconds: {{ .periodSeconds }}
            timeoutSeconds: {{ .timeoutSeconds }}
            failureThreshold: {{ .failureThreshold }}
            successThreshold: {{ .successThreshold }}
          {{- end }}
          {{- end }}
          volumeMounts:
            - name: data
              mountPath: /data/db
            - name: config
              mountPath: /etc/mongod.conf
              subPath: mongod.conf
            - name: logs
              mountPath: /var/log/mongodb
          resources:
            {{- toYaml .Values.mongodb.resources | nindent 12 }}
      volumes:
        - name: data
          {{- if .Values.mongodb.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ include "mongodb.fullname" . }}-data
          {{- else }}
          emptyDir: {}
          {{- end }}
        - name: config
          configMap:
            name: {{ include "mongodb.config.configmap" . }}
        - name: logs
          emptyDir: {}
{{- end }}
