{{- if .Values.redis.enabled }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "redis.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "redis.labels" . | nindent 4 }}
spec:
  serviceName: {{ include "redis.fullname" . }}-headless
  replicas: {{ .Values.redis.replicaCount }}
  selector:
    matchLabels:
      {{- include "redis.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "redis.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.serviceAccount.create }}
      serviceAccountName: {{ include "redis.serviceAccountName" $ }}
      {{- end }}
      {{- with .Values.redis.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.redis.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.redis.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.redis.securityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: redis
          image: "{{ .Values.redis.image.repository }}:{{ .Values.redis.image.tag }}"
          imagePullPolicy: {{ .Values.redis.image.pullPolicy }}
          {{- with .Values.redis.podSecurityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          command:
            - redis-server
            - /etc/redis/redis.conf
          {{- if .Values.redis.auth.enabled }}
          env:
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "redis.auth.secretRef" . }}
                  key: redis-password
          {{- end }}
          ports:
            - name: redis
              containerPort: {{ .Values.redis.service.ports.redis }}
              protocol: TCP
          {{- with .Values.redis.livenessProbe }}
          {{- if .enabled }}
          livenessProbe:
            exec:
              command:
                - redis-cli
                {{- if $.Values.redis.auth.enabled }}
                - -a
                - $(REDIS_PASSWORD)
                {{- end }}
                - ping
            initialDelaySeconds: {{ .initialDelaySeconds }}
            periodSeconds: {{ .periodSeconds }}
            timeoutSeconds: {{ .timeoutSeconds }}
            failureThreshold: {{ .failureThreshold }}
            successThreshold: {{ .successThreshold }}
          {{- end }}
          {{- end }}
          {{- with .Values.redis.readinessProbe }}
          {{- if .enabled }}
          readinessProbe:
            exec:
              command:
                - redis-cli
                {{- if $.Values.redis.auth.enabled }}
                - -a
                - $(REDIS_PASSWORD)
                {{- end }}
                - ping
            initialDelaySeconds: {{ .initialDelaySeconds }}
            periodSeconds: {{ .periodSeconds }}
            timeoutSeconds: {{ .timeoutSeconds }}
            failureThreshold: {{ .failureThreshold }}
            successThreshold: {{ .successThreshold }}
          {{- end }}
          {{- end }}
          volumeMounts:
            - name: data
              mountPath: /data
            - name: config
              mountPath: /etc/redis
          resources:
            {{- toYaml .Values.redis.resources | nindent 12 }}
      volumes:
        - name: config
          configMap:
            name: {{ include "redis.config.configmap" . }}
  {{- if .Values.redis.persistence.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          {{- include "redis.labels" . | nindent 10 }}
      spec:
        accessModes:
          - {{ .Values.redis.persistence.accessMode }}
        {{- if .Values.redis.persistence.storageClass }}
        storageClassName: {{ .Values.redis.persistence.storageClass }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.redis.persistence.size }}
  {{- else }}
  template:
    spec:
      volumes:
        - name: data
          emptyDir: {}
  {{- end }}
{{- end }}
