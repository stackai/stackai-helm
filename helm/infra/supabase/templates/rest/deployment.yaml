{{- if .Values.rest.enabled -}}
---
apiVersion: apps/v1
kind: Deployment
metadata:
metadata:
  name: {{ template "supabase.rest" . }}
  namespace: {{ .Release.Namespace }}
  labels:
{{ include "supabase.labels" . | indent 4 }}
spec:
  replicas: {{ default 1 .Values.rest.replicas }}
  revisionHistoryLimit: {{ default 10 .Values.rest.revisionHistoryLimit }}
  selector:
    matchLabels:
{{ include "supabase.selectorLabels" . | indent 6 }}
      app.kubernetes.io/component: rest
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
{{ include "supabase.selectorLabels" . | indent 8 }}
        app.kubernetes.io/component: rest
    spec:
{{- if or .Values.serviceAccount.create .Values.rest.serviceAccountName }}
      serviceAccountName: {{ default (include "supabase.serviceAccountName" .) .Values.rest.serviceAccountName }}
      automountServiceAccountToken: {{ .Values.rest.automountServiceAccountToken | default false }}
{{- end }}
{{- if eq .Values.db.type "internal" }}
      initContainers:
      - name: db-ready
        image: postgres:15-alpine
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh", "-c"]
        args:
        - |
          until pg_isready -h $(DB_HOST) -p $(DB_PORT) -U $(DB_USER); do
          echo "Waiting for database to start..."
          sleep 2
          done
        - echo "Database is ready"
        env:
        - name: DB_HOST
          value: {{ template "supabase.db" . }}
        - name: DB_PORT
          value: "{{ template "supabase.db.port" . }}"
        - name: DB_USER
          value: {{ template "supabase.db.username" . }}
{{- end }}
      containers:
      - name: rest
        image: {{ .Values.rest.image.repository }}:{{ .Values.rest.image.tag }}
        imagePullPolicy: IfNotPresent
        env:
        - name: PGRST_APP_SETTINGS_JWT_EXP
          value: "{{ default "3600" .Values.jwt.exp }}"
        - name: PGRST_APP_SETTINGS_JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: {{ include "supabase.jwt.secretRef" . }}
              key: secret
        - name: PGRST_JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: {{ include "supabase.jwt.secretRef" . }}
              key: secret
        - name: PGRST_DB_ANON_ROLE
          value: {{ .Values.rest.db.anonRole }}
        - name: PGRST_DB_SCHEMAS
          value: {{ .Values.rest.db.schemas }}
        - name: PGRST_DB_USE_LEGACY_GUCS
          value: "false"
        - name: PGRST_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "supabase.db.secretRef" . }}
              key: dbPassword
        - name: PGRST_DB_URI
          value: postgres://{{ .Values.rest.db.username }}:$(PGRST_DB_PASSWORD)@{{ template "supabase.db" . }}:{{ template "supabase.db.port" . }}/{{ template "supabase.db.database" . }}?sslmode={{ template "supabase.db.ssl" . }}
        ports:
        - name: http
          containerPort: 3000
          protocol: TCP
{{- if .Values.rest.resources }}
        resources:
{{ toYaml .Values.rest.resources | indent 10 }}
{{- end }}
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /
            port: http
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 1
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /
            port: http
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 1
{{- end }}
