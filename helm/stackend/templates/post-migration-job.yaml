{{- if .Values.postMigration.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "stackend.fullname" . }}-post-migration
  labels:
    {{- include "stackend.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "2"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  template:
    metadata:
      labels:
        {{- include "stackend.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: post-migration
    spec:
      restartPolicy: OnFailure
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "stackend.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        - name: wait-for-migration
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ['sh', '-c']
          args:
            - |
              echo "=== Post-Migration Job: Waiting for migration to complete ==="
              echo "Initial delay: {{ .Values.postMigration.delaySeconds | default 60 }} seconds"
              sleep {{ .Values.postMigration.delaySeconds | default 60 }}

              echo "Checking if migration job completed..."
              MAX_RETRIES=10
              RETRY_COUNT=0

              until curl -f http://{{ include "stackend.fullname" . }}:8000 2>/dev/null; do
                RETRY_COUNT=$((RETRY_COUNT + 1))
                if [ $RETRY_COUNT -ge $MAX_RETRIES ]; then
                  echo "ERROR: API health check failed after $MAX_RETRIES attempts"
                  exit 1
                fi
                echo "API is not ready yet, waiting... (attempt $RETRY_COUNT/$MAX_RETRIES)"
                sleep {{ .Values.postMigration.checkInterval | default 10 }}
              done
              echo "API is ready, proceeding with post-migration tasks..."
          env:
            {{- range $key, $value := .Values.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
      containers:
        - name: post-migration
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ['/bin/bash', '/scripts/post-migration.sh']
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          env:
            - name: LOAD_CONNECTIONS_ONLY
              value: "false"
            {{- range $key, $value := .Values.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
          volumeMounts:
            - name: post-migration-script
              mountPath: /scripts
              readOnly: true
          resources:
            requests:
              memory: "2Gi"
              cpu: "500m"
            limits:
              memory: "4Gi"
              cpu: "1000m"
      volumes:
        - name: post-migration-script
          configMap:
            name: {{ include "stackend.fullname" . }}-post-migration-script
            defaultMode: 0755
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}
