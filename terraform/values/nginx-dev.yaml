# Development values for StackAI Nginx Ingress
nameOverride: ""
fullnameOverride: ""

# Service Account
serviceAccount:
  create: true
  automount: true
  annotations: {}
  name: ""

# Nginx Ingress Controller Configuration
controller:
  enabled: true
  image:
    repository: registry.k8s.io/ingress-nginx/controller
    tag: v1.9.4
    pullPolicy: IfNotPresent

  # Replica Configuration
  replicaCount: 1

  # Service Configuration for Docker Desktop
  service:
    type: LoadBalancer
    ports:
      http: 80
      https: 443
    # Remove Azure-specific annotations for Docker Desktop
    annotations: {}

  # Ingress Class Configuration
  ingressClassResource:
    name: nginx
    enabled: true
    default: true
    controllerValue: "k8s.io/ingress-nginx"

  # Ingress Class Name
  ingressClass: nginx

  # Disable webhooks for development
  admissionWebhooks:
    enabled: false

  # Enable host network for Docker Desktop
  hostNetwork: true
  dnsPolicy: ClusterFirstWithHostNet

  # Controller Configuration
  config:
    # Enable access logs
    enable-access-log-for-default-backend: "true"
    # Custom headers
    add-forwarded-for-headers: "true"
    # SSL configuration
    ssl-protocols: "TLSv1.2 TLSv1.3"
    ssl-redirect: "false"
    # Client body size
    client-body-buffer-size: "128k"
    client-header-buffer-size: "1k"
    large-client-header-buffers: "4 4k"
    # Proxy configuration
    proxy-connect-timeout: "60"
    proxy-send-timeout: "60"
    proxy-read-timeout: "60"
    proxy-buffer-size: "4k"
    proxy-buffers: "4 32k"
    proxy-busy-buffers-size: "8k"
    # Rate limiting
    rate-limit: "100"
    rate-limit-window: "1m"
    # CORS headers for API access
    enable-cors: "true"
    cors-allow-origin: "*"
    cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,apikey"

  # Resources
  resources:
    requests:
      memory: 128Mi
      cpu: 100m
    limits:
      memory: 512Mi
      cpu: 500m

  # Security Context
  securityContext:
    enabled: true
    runAsUser: 101
    runAsGroup: 101
    runAsNonRoot: true
    fsGroup: 65534

  # Pod Security Context
  podSecurityContext:
    enabled: true
    runAsUser: 101
    runAsGroup: 101
    runAsNonRoot: true
    fsGroup: 65534

  # Force NGINX to run on control-plane node for Docker Desktop
  nodeSelector:
    node-role.kubernetes.io/control-plane: ""

  # Tolerations for control-plane node
  tolerations:
    - key: node-role.kubernetes.io/control-plane
      operator: Exists
      effect: NoSchedule

  # Affinity
  affinity: {}

  # Liveness and Readiness Probes
  livenessProbe:
    enabled: true
    httpGet:
      path: /healthz
      port: 10254
      scheme: HTTP
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 1
    failureThreshold: 5
    successThreshold: 1

  readinessProbe:
    enabled: true
    httpGet:
      path: /healthz
      port: 10254
      scheme: HTTP
    initialDelaySeconds: 0
    periodSeconds: 5
    timeoutSeconds: 1
    failureThreshold: 3
    successThreshold: 1

# Default Backend Configuration
defaultBackend:
  enabled: true
  image:
    repository: nginx
    tag: "1.25-alpine"
    pullPolicy: IfNotPresent

  # Resources
  resources:
    requests:
      memory: 32Mi
      cpu: 10m
    limits:
      memory: 64Mi
      cpu: 50m

# RBAC Configuration
rbac:
  create: true

# Service Routing Configuration - ENABLE THIS for localhost access
serviceRouting:
  enabled: true
  services:
    # ArgoCD
    argocd:
      enabled: true
      service: "argocd-server"
      port: 80
      path: "/argocd"

    # Supabase services
    supabase:
      enabled: true
      api:
        service: "supabase-kong"
        port: 8000
        path: "/supabase/rest"
      auth:
        service: "supabase-kong"
        port: 8000
        path: "/supabase/auth"
      realtime:
        service: "supabase-kong"
        port: 8000
        path: "/supabase/realtime"
      storage:
        service: "supabase-kong"
        port: 8000
        path: "/supabase/storage"
      functions:
        service: "supabase-kong"
        port: 8000
        path: "/supabase/functions"
      graphql:
        service: "supabase-kong"
        port: 8000
        path: "/supabase/graphql"
      studio:
        service: "supabase-studio"
        port: 3000
        path: "/supabase/studio"

    # Temporal
    temporal:
      enabled: true
      service: "temporal-web"
      port: 8088
      path: "/temporal"

    # Unstructured API
    unstructured:
      enabled: true
      service: "unstructured"
      port: 8000
      path: "/unstructured"

    # Weaviate
    weaviate:
      enabled: true
      service: "weaviate"
      port: 8080
      path: "/weaviate"

    # Data stores (for development access)
    mongodb:
      enabled: true
      service: "mongodb"
      port: 27017
      path: "/mongodb"

    redis:
      enabled: true
      service: "redis"
      port: 6379
      path: "/redis"

    postgres:
      enabled: true
      service: "postgres"
      port: 5432
      path: "/postgres"
