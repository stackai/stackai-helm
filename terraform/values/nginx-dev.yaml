# Official Nginx Ingress Controller Configuration for StackAI
# This replaces the custom nginx chart with the official ingress-nginx chart

controller:
  # Service Configuration - Works for both Docker Desktop and VM deployments
  service:
    type: LoadBalancer
    ports:
      http: 80
      https: 443
    # Annotations for VM deployments (Azure Load Balancer)
    annotations:
      service.beta.kubernetes.io/azure-load-balancer-internal: "false"
      service.beta.kubernetes.io/azure-load-balancer-resource-group: "stackai-rg"

  # Ingress Class Configuration
  ingressClassResource:
    name: nginx
    enabled: true
    default: true
    controllerValue: "k8s.io/ingress-nginx"

  # Ingress Class Name
  ingressClass: nginx

  # Disable webhooks for development
  admissionWebhooks:
    enabled: false

  # Enable host network for Docker Desktop
  hostNetwork: true
  dnsPolicy: ClusterFirstWithHostNet

  # Controller Configuration
  config:
    # Enable access logs
    enable-access-log-for-default-backend: "true"
    # Custom headers
    add-forwarded-for-headers: "true"
    # SSL configuration
    ssl-protocols: "TLSv1.2 TLSv1.3"
    ssl-redirect: "false"
    # Client body size
    client-body-buffer-size: "128k"
    client-header-buffer-size: "1k"
    large-client-header-buffers: "4 4k"
    # Proxy configuration
    proxy-connect-timeout: "60"
    proxy-send-timeout: "60"
    proxy-read-timeout: "60"
    proxy-buffer-size: "4k"
    proxy-buffers: "4 32k"
    proxy-busy-buffers-size: "8k"
    # Rate limiting
    rate-limit: "100"
    rate-limit-window: "1m"
    # CORS headers for API access
    enable-cors: "true"
    cors-allow-origin: "*"
    cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,apikey"

  # Resources - Increased for macOS local development
  resources:
    requests:
      memory: 256Mi
      cpu: 200m
    limits:
      memory: 1Gi
      cpu: 1000m

  # Security Context
  securityContext:
    enabled: true
    runAsUser: 101
    runAsGroup: 101
    runAsNonRoot: true
    fsGroup: 65534

  # Pod Security Context
  podSecurityContext:
    enabled: true
    runAsUser: 101
    runAsGroup: 101
    runAsNonRoot: true
    fsGroup: 65534

  # Node Selector - Fixed to match your node label
  nodeSelector:
    node-role.kubernetes.io/control-plane: "true"

  # Tolerations for control-plane node
  tolerations:
    - key: node-role.kubernetes.io/control-plane
      operator: Exists
      effect: NoSchedule

  # Affinity
  affinity: {}

  # Liveness and Readiness Probes
  livenessProbe:
    enabled: true
    httpGet:
      path: /healthz
      port: 10254
      scheme: HTTP
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 1
    failureThreshold: 5
    successThreshold: 1

  readinessProbe:
    enabled: true
    httpGet:
      path: /healthz
      port: 10254
      scheme: HTTP
    initialDelaySeconds: 0
    periodSeconds: 5
    timeoutSeconds: 1
    failureThreshold: 3
    successThreshold: 1

# Default Backend Configuration - Use the built-in default backend
defaultBackend:
  enabled: true
  # Use the official ingress-nginx default backend image which has proper health checks
  image:
    repository: registry.k8s.io/ingress-nginx/nginx
    tag: "1.0.0"
    pullPolicy: IfNotPresent

  # Resources
  resources:
    requests:
      memory: 32Mi
      cpu: 10m
    limits:
      memory: 64Mi
      cpu: 50m

# RBAC Configuration
rbac:
  create: true

# Service Account
serviceAccount:
  create: true
  automount: true
  annotations: {}
  name: ""

# Metrics
metrics:
  enabled: true
  service:
    type: ClusterIP
    annotations: {}

# Prometheus monitoring
prometheus:
  enabled: false
  serviceMonitor:
    enabled: false

# Pod Disruption Budget
podDisruptionBudget:
  enabled: false
  minAvailable: 1

# Autoscaling
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 11
  targetCPUUtilizationPercentage: 50
  targetMemoryUtilizationPercentage: 50

# Pod Annotations
podAnnotations: {}

# Pod Labels
podLabels: {}

# Extra volumes
extraVolumes: []

# Extra volume mounts
extraVolumeMounts: []

# Extra containers
extraContainers: []

# Extra init containers
extraInitContainers: []

# Extra environment variables
extraEnvVars: []

# Extra environment variables from secrets/configmaps
extraEnvVarsFrom: []

# Extra ports
extraPorts: []

# Extra arguments
extraArgs: {}

# Extra labels
extraLabels: {}

# Extra annotations
extraAnnotations: {}

# Lifecycle hooks
lifecycle: {}

# Termination grace period
terminationGracePeriodSeconds: 300

# Update strategy
updateStrategy:
  type: RollingUpdate
  rollingUpdate:
    maxUnavailable: 1
    maxSurge: 1

# Revision history limit
revisionHistoryLimit: 10

# Progress deadline seconds
progressDeadlineSeconds: 600

# Deployment strategy
deploymentStrategy:
  type: RollingUpdate
  rollingUpdate:
    maxUnavailable: 1
    maxSurge: 1
